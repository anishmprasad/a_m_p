{"version":3,"sources":["store/configureStore.js","serviceWorker.js","components/Home/index.js","components/Header/index.js","Router/index.js","Root/index.js","index.js","reducers/index.js","store/configureStore.prod.js"],"names":["module","exports","require","Boolean","window","location","hostname","match","Home","params","react_default","a","createElement","className","Header","Router","props","react","Switch","Route","exact","path","component","Root","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","onEnter","es","store","BrowserRouter","Component","configureStore","rootElement","document","getElementById","render","src_Root","navigator","serviceWorker","ready","then","registration","unregister","rootReducer","combineReducers","__webpack_require__","d","__webpack_exports__","createStoreWithMiddleware","applyMiddleware","thunk","ReduxPromise","createStore","StockApp"],"mappings":"4EAIEA,EAAOC,QAAUC,EAAQ,uICQPC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,gJCjBS,SAASC,EAAKC,GAC3B,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SCDJ,SAASC,EAAOL,GAC7B,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WCMJ,SAASE,EAAOC,GAC7B,OACEN,EAAAC,EAAAC,cAACK,EAAA,SAAD,KACEP,EAAAC,EAAAC,cAACE,EAAD,MACAJ,EAAAC,EAAAC,cAACM,EAAA,EAAD,KACER,EAAAC,EAAAC,cAACO,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWd,kBCY1Be,cArBb,SAAAA,EAAYP,GAAO,IAAAQ,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACjBC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAAMX,KACDe,MAAQ,CACXC,SAAS,GAHMR,wEAOjB,OACEd,EAAAC,EAAAC,cAACqB,EAAA,EAAD,CAAUC,MAAOP,KAAKX,MAAMkB,OACxBxB,EAAAC,EAAAC,cAACuB,EAAA,EAAD,KACEzB,EAAAC,EAAAC,cAACO,EAAA,EAAD,CAAOE,KAAK,IAAIC,UAAWP,aAXpBqB,aCEbF,EAAQG,MACRC,EAAcC,SAASC,eAAe,QAE5CC,iBAAO/B,EAAAC,EAAAC,cAAC8B,EAAD,CAAMR,MAAOA,IAAWI,GLuHzB,kBAAmBK,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,0EM3HJC,EAJKC,YAAgB,qBCJpCC,EAAAC,EAAAC,EAAA,4BAAAhB,IAMA,IAAMiB,EAA4BC,YAChCC,IAAOC,IADyBF,CAEhCG,KAEa,SAASrB,IACtB,OAAOiB,EAA0BK","file":"static/js/main.bc20401c.chunk.js","sourcesContent":["if (\n  process.env.NODE_ENV !== 'development' ||\n  process.env.PLATFORM_ENV !== 'web'\n) {\n  module.exports = require('./configureStore.prod');\n} else {\n  module.exports = require('./configureStore.dev');\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nexport default function Home(params) {\n  return(\n    <div className=\"Home\">\n    </div>\n  )\n}","import React from 'react';\n\nexport default function Header(params) {\n  return(\n    <div className=\"header\">\n    </div>\n  )\n}","import React, { Fragment } from 'react';\nimport { Route, Switch } from 'react-router-dom';\n// import 'styleCommon/styles.scss';\n// import DynamicRoute from 'components/DynamicRoute';\n// import HelloWorld from 'components/HelloWorld'\n// import Graph from '../Graph';\nimport Home from '../components/Home'\nimport Header from '../components/Header'\n\n\nexport default function Router(props) {\n  return (\n    <Fragment>\n      <Header />\n      <Switch>\n        <Route exact path='/' component={Home} />\n      </Switch>\n    </Fragment>\n  )\n}\n\n","import React, { Component } from \"react\";\nimport { Provider } from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport Router from \"../Router\";\nimport { BrowserRouter, Route } from \"react-router-dom\";\nclass Root extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      onEnter: false\n    };\n  }\n  render() {\n    return (\n      <Provider store={this.props.store}>\n          <BrowserRouter>\n            <Route path=\"/\" component={Router} />\n          </BrowserRouter>\n      </Provider>\n    );\n  }\n}\n\nRoot.propTypes = {\n  store: PropTypes.object\n};\n\nexport default Root;\n","import React from 'react';\nimport { render } from 'react-dom';\nimport './index.css';\n// import App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport configureStore from './store/configureStore';\nimport Root from './Root';\nconst store = configureStore();\nconst rootElement = document.getElementById('root');\n\nrender(<Root store={store} />, rootElement);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n\n\n\n\n// import React from 'react';\n// import { render } from 'react-dom';\n// import Root from 'containers/Root';\n// import configureStore from './store/configureStore';\n// import 'babel-polyfill';\n// const store = configureStore();\n// const rootElement = document.getElementById('root');\n\n// render(<Root store={store} />, rootElement);","import { combineReducers } from 'redux';\n// import canvas from './graph'\n\n\nconst rootReducer = combineReducers({\n  \n});\n\nexport default rootReducer;\n","import { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport StockApp from '../reducers';\nimport ReduxPromise from 'redux-promise';\n\n// create a store that has redux-thunk middleware enabled\nconst createStoreWithMiddleware = applyMiddleware(\n  thunk, ReduxPromise\n)(createStore);\n\nexport default function configureStore() {\n  return createStoreWithMiddleware(StockApp);\n}\n"],"sourceRoot":""}